---
description: Create a form using NextJS / React Hook Form / Server Actions.
globs: *.tsx
alwaysApply: false
---
## Context

* Creating a form should always use Shadcn/UI
* Forms must use React Hook Form with Zod validation using `zodResolver`
* All validation schemas must be imported from `/lib/validations/` files to ensure consistency between frontend and backend
* Forms should handle loading states, error handling with toast notifications, and proper form submission

## Example: SignUp Form

```tsx
"use client";

import Link from "next/link";

import { useRouter } from "next/navigation";
import { useState } from "react";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { toast } from "sonner";

import { Button } from "@/src/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/src/components/ui/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/src/components/ui/form";
import { Input } from "@/src/components/ui/input";
import {
  SignUpSchema,
  type SignUpSchemaType,
} from "@/src/lib/validations/auth";

import { Eye, EyeOff, Lock, Mail, User, UserPlus } from "lucide-react";
import { signIn } from "next-auth/react";

export const SignUpForm = () => {
  const router = useRouter();

  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const form = useForm<SignUpSchemaType>({
    resolver: zodResolver(SignUpSchema),
    defaultValues: {
      username: "",
      firstName: "",
      lastName: "",
      email: "",
      password: "",
    },
  });

  const onSubmit = async (data: SignUpSchemaType) => {
    setIsLoading(true);

    try {
      const formData = new FormData();

      Object.entries(data).forEach(([key, value]) => {
        formData.append(key, value);
      });

      const response = await fetch("/api/auth/sign-up", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        const error = await response.json();
        toast.error(error.message);
        return;
      }

      toast.success("Your account has been created successfully!");

      const signInResponse = await signIn("credentials", {
        email: data.email,
        password: data.password,
        redirect: false,
      });

      if (signInResponse?.error) {
        toast.error("Invalid email or password");
        return;
      }

      router.push("/dashboard");
    } catch {
      toast.error("An error occurred while creating your account");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <section className="w-full max-w-md">
      <Card className="border-slate-200 bg-white shadow-sm rounded-xl overflow-hidden">
        <CardHeader className="bg-white pb-6">
          <CardTitle className="text-xl font-semibold text-slate-800">
            Create an Account
          </CardTitle>
          <CardDescription className="text-slate-500">
            Fill out the form below to register
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-5">
              <FormField
                control={form.control}
                name="username"
                render={({ field }) => (
                  <FormItem className="space-y-2">
                    <FormLabel
                      htmlFor={field.name}
                      className="text-sm font-medium text-slate-700"
                    >
                      Username <span className="text-red-500">*</span>
                    </FormLabel>
                    <div className="relative">
                      <User className="text-slate-400 absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2" />
                      <FormControl>
                        <Input
                          {...field}
                          id={field.name}
                          placeholder="johndoe"
                          className="border-slate-200 pl-10 focus-visible:ring-indigo-500"
                        />
                      </FormControl>
                    </div>
                    <FormMessage className="text-red-500 text-xs" />
                  </FormItem>
                )}
              />

              <div className="flex flex-col md:flex-row md:gap-4">
                <FormField
                  control={form.control}
                  name="firstName"
                  render={({ field }) => (
                    <FormItem className="space-y-2 w-full">
                      <FormLabel
                        htmlFor={field.name}
                        className="text-sm font-medium text-slate-700"
                      >
                        First Name <span className="text-red-500">*</span>
                      </FormLabel>
                      <div className="relative">
                        <User className="text-slate-400 absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2" />
                        <FormControl>
                          <Input
                            {...field}
                            id={field.name}
                            placeholder="John"
                            className="border-slate-200 pl-10 focus-visible:ring-indigo-500"
                          />
                        </FormControl>
                      </div>
                      <FormMessage className="text-red-500 text-xs" />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="lastName"
                  render={({ field }) => (
                    <FormItem className="space-y-2 w-full mt-4 md:mt-0">
                      <FormLabel
                        htmlFor={field.name}
                        className="text-sm font-medium text-slate-700"
                      >
                        Last Name <span className="text-red-500">*</span>
                      </FormLabel>
                      <div className="relative">
                        <User className="text-slate-400 absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2" />
                        <FormControl>
                          <Input
                            {...field}
                            id={field.name}
                            placeholder="Doe"
                            className="border-slate-200 pl-10 focus-visible:ring-indigo-500"
                          />
                        </FormControl>
                      </div>
                      <FormMessage className="text-red-500 text-xs" />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem className="space-y-2">
                    <FormLabel
                      htmlFor={field.name}
                      className="text-sm font-medium text-slate-700"
                    >
                      Email <span className="text-red-500">*</span>
                    </FormLabel>
                    <div className="relative">
                      <Mail className="text-slate-400 absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2" />
                      <FormControl>
                        <Input
                          {...field}
                          id={field.name}
                          type="email"
                          placeholder="john.doe@email.com"
                          className="border-slate-200 pl-10 focus-visible:ring-indigo-500"
                        />
                      </FormControl>
                    </div>
                    <FormMessage className="text-red-500 text-xs" />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem className="space-y-2">
                    <FormLabel
                      htmlFor={field.name}
                      className="text-sm font-medium text-slate-700"
                    >
                      Password <span className="text-red-500">*</span>
                    </FormLabel>
                    <div className="relative">
                      <Lock className="text-slate-400 absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2" />
                      <FormControl>
                        <Input
                          {...field}
                          id={field.name}
                          type={showPassword ? "text" : "password"}
                          placeholder="••••••••"
                          className="border-slate-200 pr-10 pl-10 focus-visible:ring-indigo-500"
                        />
                      </FormControl>
                      <button
                        type="button"
                        className="text-slate-400 hover:text-slate-700 absolute top-1/2 right-3 -translate-y-1/2 transition-colors"
                        onClick={() =>
                          setShowPassword((current) => !current)
                        }
                        aria-label={
                          showPassword ? "Hide password" : "Show password"
                        }
                      >
                        {showPassword ? (
                          <EyeOff className="h-4 w-4" />
                        ) : (
                          <Eye className="h-4 w-4" />
                        )}
                      </button>
                    </div>
                    <FormMessage className="text-red-500 text-xs" />
                  </FormItem>
                )}
              />

              <Button
                type="submit"
                disabled={isLoading}
                className="w-full gap-2 bg-indigo-600 hover:bg-indigo-700 transition-colors mt-2"
              >
                {isLoading ? (
                  <>
                    <span className="h-4 w-4 animate-spin rounded-full border-b-2 border-white"></span>
                    Creating your account...
                  </>
                ) : (
                  <>
                    <UserPlus className="h-4 w-4" />
                    Create Account
                  </>
                )}
              </Button>
            </form>
          </Form>
        </CardContent>
        <CardFooter className="flex flex-col space-y-2 text-center text-sm bg-slate-50 border-t border-slate-200 p-4">
          <p className="text-slate-600">
            By signing up, you agree to our{" "}
            <Link
              href="/conditions"
              className="text-indigo-600 font-medium hover:text-indigo-700 transition-colors"
            >
              Terms of Use
            </Link>{" "}
            and{" "}
            <Link
              href="/privacy-policy"
              className="text-indigo-600 font-medium hover:text-indigo-700 transition-colors"
            >
              Privacy Policy
            </Link>
            .
          </p>
          <p className="text-slate-600 mt-2">
            Already have an account?{" "}
            <Link
              href="/"
              className="text-indigo-600 font-medium hover:text-indigo-700 transition-colors"
            >
              Sign in
            </Link>
          </p>
        </CardFooter>
      </Card>
    </section>
  );
};
```

## Rules

- **Always use React Hook Form with `zodResolver` for form validation**
- **Import validation schemas from `/lib/validations/` files to ensure frontend/backend consistency**
- **Use `useForm<SchemaType>` with proper TypeScript typing**
- **Wrap forms in Shadcn/UI Card components for consistent styling**
- **Always handle loading states with `useState` and disable submit button during submission**
- **Use `toast` from Sonner for success/error notifications**
- **Handle form submission with try-catch blocks**
- **Send data as FormData to API routes using `Object.entries(data).forEach()`**
- **Parse API error responses and display appropriate error messages**
- **Use Lucide React icons for form field icons**
- **Implement proper accessibility with `htmlFor`, `id`, and `aria-label` attributes**
- **Use relative positioning for input icons and password visibility toggles**
- **Apply consistent styling with Tailwind classes**

## Form Structure

1. **Form Setup**: Use `useForm` with `zodResolver` and schema
2. **State Management**: Loading state and any UI state (like password visibility)
3. **Submit Handler**: Async function with proper error handling
4. **Form JSX**: Shadcn/UI components with proper field mapping
5. **Validation**: Real-time validation with `FormMessage` components

## Required Components
- `Form`, `FormControl`, `FormField`, `FormItem`, `FormLabel`, `FormMessage` from Shadcn/UI
- `Input`, `Button`, `Card` components from Shadcn/UI
- `toast` from Sonner for notifications
- `useRouter` from Next.js for navigation
- Icons from Lucide React
